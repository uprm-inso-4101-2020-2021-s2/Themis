// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Themis/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetVoteRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetVoteRequest) Reset()         { *m = QueryGetVoteRequest{} }
func (m *QueryGetVoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVoteRequest) ProtoMessage()    {}
func (*QueryGetVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{0}
}
func (m *QueryGetVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVoteRequest.Merge(m, src)
}
func (m *QueryGetVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVoteRequest proto.InternalMessageInfo

func (m *QueryGetVoteRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetVoteResponse struct {
	Vote *Vote `protobuf:"bytes,1,opt,name=Vote,proto3" json:"Vote,omitempty"`
}

func (m *QueryGetVoteResponse) Reset()         { *m = QueryGetVoteResponse{} }
func (m *QueryGetVoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVoteResponse) ProtoMessage()    {}
func (*QueryGetVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{1}
}
func (m *QueryGetVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVoteResponse.Merge(m, src)
}
func (m *QueryGetVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVoteResponse proto.InternalMessageInfo

func (m *QueryGetVoteResponse) GetVote() *Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}

type QueryAllVoteRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVoteRequest) Reset()         { *m = QueryAllVoteRequest{} }
func (m *QueryAllVoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVoteRequest) ProtoMessage()    {}
func (*QueryAllVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{2}
}
func (m *QueryAllVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVoteRequest.Merge(m, src)
}
func (m *QueryAllVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVoteRequest proto.InternalMessageInfo

func (m *QueryAllVoteRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryVoteWithGroup struct {
	Group      uint64             `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVoteWithGroup) Reset()         { *m = QueryVoteWithGroup{} }
func (m *QueryVoteWithGroup) String() string { return proto.CompactTextString(m) }
func (*QueryVoteWithGroup) ProtoMessage()    {}
func (*QueryVoteWithGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{3}
}
func (m *QueryVoteWithGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoteWithGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoteWithGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoteWithGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoteWithGroup.Merge(m, src)
}
func (m *QueryVoteWithGroup) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoteWithGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoteWithGroup.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoteWithGroup proto.InternalMessageInfo

func (m *QueryVoteWithGroup) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *QueryVoteWithGroup) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryVoteWithGroupAndPoll struct {
	Group      uint64             `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
	Poll       uint64             `protobuf:"varint,2,opt,name=poll,proto3" json:"poll,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVoteWithGroupAndPoll) Reset()         { *m = QueryVoteWithGroupAndPoll{} }
func (m *QueryVoteWithGroupAndPoll) String() string { return proto.CompactTextString(m) }
func (*QueryVoteWithGroupAndPoll) ProtoMessage()    {}
func (*QueryVoteWithGroupAndPoll) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{4}
}
func (m *QueryVoteWithGroupAndPoll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoteWithGroupAndPoll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoteWithGroupAndPoll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoteWithGroupAndPoll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoteWithGroupAndPoll.Merge(m, src)
}
func (m *QueryVoteWithGroupAndPoll) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoteWithGroupAndPoll) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoteWithGroupAndPoll.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoteWithGroupAndPoll proto.InternalMessageInfo

func (m *QueryVoteWithGroupAndPoll) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *QueryVoteWithGroupAndPoll) GetPoll() uint64 {
	if m != nil {
		return m.Poll
	}
	return 0
}

func (m *QueryVoteWithGroupAndPoll) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryVoteWithUser struct {
	User       string             `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVoteWithUser) Reset()         { *m = QueryVoteWithUser{} }
func (m *QueryVoteWithUser) String() string { return proto.CompactTextString(m) }
func (*QueryVoteWithUser) ProtoMessage()    {}
func (*QueryVoteWithUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{5}
}
func (m *QueryVoteWithUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoteWithUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoteWithUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoteWithUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoteWithUser.Merge(m, src)
}
func (m *QueryVoteWithUser) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoteWithUser) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoteWithUser.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoteWithUser proto.InternalMessageInfo

func (m *QueryVoteWithUser) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *QueryVoteWithUser) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryVoteWithUserAndPoll struct {
	User       string             `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Poll       uint64             `protobuf:"varint,2,opt,name=poll,proto3" json:"poll,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVoteWithUserAndPoll) Reset()         { *m = QueryVoteWithUserAndPoll{} }
func (m *QueryVoteWithUserAndPoll) String() string { return proto.CompactTextString(m) }
func (*QueryVoteWithUserAndPoll) ProtoMessage()    {}
func (*QueryVoteWithUserAndPoll) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{6}
}
func (m *QueryVoteWithUserAndPoll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoteWithUserAndPoll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoteWithUserAndPoll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoteWithUserAndPoll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoteWithUserAndPoll.Merge(m, src)
}
func (m *QueryVoteWithUserAndPoll) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoteWithUserAndPoll) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoteWithUserAndPoll.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoteWithUserAndPoll proto.InternalMessageInfo

func (m *QueryVoteWithUserAndPoll) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *QueryVoteWithUserAndPoll) GetPoll() uint64 {
	if m != nil {
		return m.Poll
	}
	return 0
}

func (m *QueryVoteWithUserAndPoll) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryVoteWithPoll struct {
	Poll       uint64             `protobuf:"varint,1,opt,name=poll,proto3" json:"poll,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVoteWithPoll) Reset()         { *m = QueryVoteWithPoll{} }
func (m *QueryVoteWithPoll) String() string { return proto.CompactTextString(m) }
func (*QueryVoteWithPoll) ProtoMessage()    {}
func (*QueryVoteWithPoll) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{7}
}
func (m *QueryVoteWithPoll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoteWithPoll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoteWithPoll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoteWithPoll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoteWithPoll.Merge(m, src)
}
func (m *QueryVoteWithPoll) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoteWithPoll) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoteWithPoll.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoteWithPoll proto.InternalMessageInfo

func (m *QueryVoteWithPoll) GetPoll() uint64 {
	if m != nil {
		return m.Poll
	}
	return 0
}

func (m *QueryVoteWithPoll) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryVoteWithPollAndVote struct {
	Poll       uint64             `protobuf:"varint,1,opt,name=poll,proto3" json:"poll,omitempty"`
	Vote       string             `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVoteWithPollAndVote) Reset()         { *m = QueryVoteWithPollAndVote{} }
func (m *QueryVoteWithPollAndVote) String() string { return proto.CompactTextString(m) }
func (*QueryVoteWithPollAndVote) ProtoMessage()    {}
func (*QueryVoteWithPollAndVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{8}
}
func (m *QueryVoteWithPollAndVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoteWithPollAndVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoteWithPollAndVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoteWithPollAndVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoteWithPollAndVote.Merge(m, src)
}
func (m *QueryVoteWithPollAndVote) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoteWithPollAndVote) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoteWithPollAndVote.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoteWithPollAndVote proto.InternalMessageInfo

func (m *QueryVoteWithPollAndVote) GetPoll() uint64 {
	if m != nil {
		return m.Poll
	}
	return 0
}

func (m *QueryVoteWithPollAndVote) GetVote() string {
	if m != nil {
		return m.Vote
	}
	return ""
}

func (m *QueryVoteWithPollAndVote) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllVoteResponse struct {
	Vote       []*Vote             `protobuf:"bytes,1,rep,name=Vote,proto3" json:"Vote,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVoteResponse) Reset()         { *m = QueryAllVoteResponse{} }
func (m *QueryAllVoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVoteResponse) ProtoMessage()    {}
func (*QueryAllVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{9}
}
func (m *QueryAllVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVoteResponse.Merge(m, src)
}
func (m *QueryAllVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVoteResponse proto.InternalMessageInfo

func (m *QueryAllVoteResponse) GetVote() []*Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *QueryAllVoteResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPollRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPollRequest) Reset()         { *m = QueryGetPollRequest{} }
func (m *QueryGetPollRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPollRequest) ProtoMessage()    {}
func (*QueryGetPollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{10}
}
func (m *QueryGetPollRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPollRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPollRequest.Merge(m, src)
}
func (m *QueryGetPollRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPollRequest proto.InternalMessageInfo

func (m *QueryGetPollRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPollResponse struct {
	Poll *Poll `protobuf:"bytes,1,opt,name=Poll,proto3" json:"Poll,omitempty"`
}

func (m *QueryGetPollResponse) Reset()         { *m = QueryGetPollResponse{} }
func (m *QueryGetPollResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPollResponse) ProtoMessage()    {}
func (*QueryGetPollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{11}
}
func (m *QueryGetPollResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPollResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPollResponse.Merge(m, src)
}
func (m *QueryGetPollResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPollResponse proto.InternalMessageInfo

func (m *QueryGetPollResponse) GetPoll() *Poll {
	if m != nil {
		return m.Poll
	}
	return nil
}

type QueryAllPollRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPollRequest) Reset()         { *m = QueryAllPollRequest{} }
func (m *QueryAllPollRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPollRequest) ProtoMessage()    {}
func (*QueryAllPollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{12}
}
func (m *QueryAllPollRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPollRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPollRequest.Merge(m, src)
}
func (m *QueryAllPollRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPollRequest proto.InternalMessageInfo

func (m *QueryAllPollRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPollsWithNameRequest struct {
	Name       string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPollsWithNameRequest) Reset()         { *m = QueryAllPollsWithNameRequest{} }
func (m *QueryAllPollsWithNameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPollsWithNameRequest) ProtoMessage()    {}
func (*QueryAllPollsWithNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{13}
}
func (m *QueryAllPollsWithNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPollsWithNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPollsWithNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPollsWithNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPollsWithNameRequest.Merge(m, src)
}
func (m *QueryAllPollsWithNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPollsWithNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPollsWithNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPollsWithNameRequest proto.InternalMessageInfo

func (m *QueryAllPollsWithNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryAllPollsWithNameRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPollsInGroupRequest struct {
	Group      uint64             `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPollsInGroupRequest) Reset()         { *m = QueryAllPollsInGroupRequest{} }
func (m *QueryAllPollsInGroupRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPollsInGroupRequest) ProtoMessage()    {}
func (*QueryAllPollsInGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{14}
}
func (m *QueryAllPollsInGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPollsInGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPollsInGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPollsInGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPollsInGroupRequest.Merge(m, src)
}
func (m *QueryAllPollsInGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPollsInGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPollsInGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPollsInGroupRequest proto.InternalMessageInfo

func (m *QueryAllPollsInGroupRequest) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *QueryAllPollsInGroupRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPollsInGroupWithNameRequest struct {
	Group      uint64             `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
	Name       string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPollsInGroupWithNameRequest) Reset()         { *m = QueryAllPollsInGroupWithNameRequest{} }
func (m *QueryAllPollsInGroupWithNameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPollsInGroupWithNameRequest) ProtoMessage()    {}
func (*QueryAllPollsInGroupWithNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{15}
}
func (m *QueryAllPollsInGroupWithNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPollsInGroupWithNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPollsInGroupWithNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPollsInGroupWithNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPollsInGroupWithNameRequest.Merge(m, src)
}
func (m *QueryAllPollsInGroupWithNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPollsInGroupWithNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPollsInGroupWithNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPollsInGroupWithNameRequest proto.InternalMessageInfo

func (m *QueryAllPollsInGroupWithNameRequest) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *QueryAllPollsInGroupWithNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryAllPollsInGroupWithNameRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPollResponse struct {
	Poll       []*Poll             `protobuf:"bytes,1,rep,name=Poll,proto3" json:"Poll,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPollResponse) Reset()         { *m = QueryAllPollResponse{} }
func (m *QueryAllPollResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPollResponse) ProtoMessage()    {}
func (*QueryAllPollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{16}
}
func (m *QueryAllPollResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPollResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPollResponse.Merge(m, src)
}
func (m *QueryAllPollResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPollResponse proto.InternalMessageInfo

func (m *QueryAllPollResponse) GetPoll() []*Poll {
	if m != nil {
		return m.Poll
	}
	return nil
}

func (m *QueryAllPollResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetGroupRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetGroupRequest) Reset()         { *m = QueryGetGroupRequest{} }
func (m *QueryGetGroupRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGroupRequest) ProtoMessage()    {}
func (*QueryGetGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{17}
}
func (m *QueryGetGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGroupRequest.Merge(m, src)
}
func (m *QueryGetGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGroupRequest proto.InternalMessageInfo

func (m *QueryGetGroupRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetGroupAddressRequest struct {
	Addr       string             `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetGroupAddressRequest) Reset()         { *m = QueryGetGroupAddressRequest{} }
func (m *QueryGetGroupAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGroupAddressRequest) ProtoMessage()    {}
func (*QueryGetGroupAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{18}
}
func (m *QueryGetGroupAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGroupAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGroupAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGroupAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGroupAddressRequest.Merge(m, src)
}
func (m *QueryGetGroupAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGroupAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGroupAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGroupAddressRequest proto.InternalMessageInfo

func (m *QueryGetGroupAddressRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *QueryGetGroupAddressRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetGroupResponse struct {
	Group *Group `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
}

func (m *QueryGetGroupResponse) Reset()         { *m = QueryGetGroupResponse{} }
func (m *QueryGetGroupResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGroupResponse) ProtoMessage()    {}
func (*QueryGetGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{19}
}
func (m *QueryGetGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGroupResponse.Merge(m, src)
}
func (m *QueryGetGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGroupResponse proto.InternalMessageInfo

func (m *QueryGetGroupResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type QueryAllGroupRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGroupRequest) Reset()         { *m = QueryAllGroupRequest{} }
func (m *QueryAllGroupRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGroupRequest) ProtoMessage()    {}
func (*QueryAllGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{20}
}
func (m *QueryAllGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGroupRequest.Merge(m, src)
}
func (m *QueryAllGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGroupRequest proto.InternalMessageInfo

func (m *QueryAllGroupRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGroupWithNamesRequest struct {
	Name       string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGroupWithNamesRequest) Reset()         { *m = QueryAllGroupWithNamesRequest{} }
func (m *QueryAllGroupWithNamesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGroupWithNamesRequest) ProtoMessage()    {}
func (*QueryAllGroupWithNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{21}
}
func (m *QueryAllGroupWithNamesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGroupWithNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGroupWithNamesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGroupWithNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGroupWithNamesRequest.Merge(m, src)
}
func (m *QueryAllGroupWithNamesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGroupWithNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGroupWithNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGroupWithNamesRequest proto.InternalMessageInfo

func (m *QueryAllGroupWithNamesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryAllGroupWithNamesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGroupResponse struct {
	Group      []*Group            `protobuf:"bytes,1,rep,name=Group,proto3" json:"Group,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGroupResponse) Reset()         { *m = QueryAllGroupResponse{} }
func (m *QueryAllGroupResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGroupResponse) ProtoMessage()    {}
func (*QueryAllGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{22}
}
func (m *QueryAllGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGroupResponse.Merge(m, src)
}
func (m *QueryAllGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGroupResponse proto.InternalMessageInfo

func (m *QueryAllGroupResponse) GetGroup() []*Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *QueryAllGroupResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAccountRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetAccountRequest) Reset()         { *m = QueryGetAccountRequest{} }
func (m *QueryGetAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountRequest) ProtoMessage()    {}
func (*QueryGetAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{23}
}
func (m *QueryGetAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountRequest.Merge(m, src)
}
func (m *QueryGetAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountRequest proto.InternalMessageInfo

func (m *QueryGetAccountRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetAccountAddressRequest struct {
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *QueryGetAccountAddressRequest) Reset()         { *m = QueryGetAccountAddressRequest{} }
func (m *QueryGetAccountAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountAddressRequest) ProtoMessage()    {}
func (*QueryGetAccountAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{24}
}
func (m *QueryGetAccountAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountAddressRequest.Merge(m, src)
}
func (m *QueryGetAccountAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountAddressRequest proto.InternalMessageInfo

func (m *QueryGetAccountAddressRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type QueryGetAccountResponse struct {
	Account *Account `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
}

func (m *QueryGetAccountResponse) Reset()         { *m = QueryGetAccountResponse{} }
func (m *QueryGetAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountResponse) ProtoMessage()    {}
func (*QueryGetAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{25}
}
func (m *QueryGetAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountResponse.Merge(m, src)
}
func (m *QueryGetAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountResponse proto.InternalMessageInfo

func (m *QueryGetAccountResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type QueryAllAccountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccountRequest) Reset()         { *m = QueryAllAccountRequest{} }
func (m *QueryAllAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccountRequest) ProtoMessage()    {}
func (*QueryAllAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{26}
}
func (m *QueryAllAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccountRequest.Merge(m, src)
}
func (m *QueryAllAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccountRequest proto.InternalMessageInfo

func (m *QueryAllAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAccountWithNamesRequest struct {
	Name       string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccountWithNamesRequest) Reset()         { *m = QueryAllAccountWithNamesRequest{} }
func (m *QueryAllAccountWithNamesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccountWithNamesRequest) ProtoMessage()    {}
func (*QueryAllAccountWithNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{27}
}
func (m *QueryAllAccountWithNamesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccountWithNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccountWithNamesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccountWithNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccountWithNamesRequest.Merge(m, src)
}
func (m *QueryAllAccountWithNamesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccountWithNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccountWithNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccountWithNamesRequest proto.InternalMessageInfo

func (m *QueryAllAccountWithNamesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryAllAccountWithNamesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAccountResponse struct {
	Account    []*Account          `protobuf:"bytes,1,rep,name=Account,proto3" json:"Account,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccountResponse) Reset()         { *m = QueryAllAccountResponse{} }
func (m *QueryAllAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccountResponse) ProtoMessage()    {}
func (*QueryAllAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bf07e86a62cfcf1, []int{28}
}
func (m *QueryAllAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccountResponse.Merge(m, src)
}
func (m *QueryAllAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccountResponse proto.InternalMessageInfo

func (m *QueryAllAccountResponse) GetAccount() []*Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *QueryAllAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetVoteRequest)(nil), "uprminso410120202021s2.Themis.Themis.QueryGetVoteRequest")
	proto.RegisterType((*QueryGetVoteResponse)(nil), "uprminso410120202021s2.Themis.Themis.QueryGetVoteResponse")
	proto.RegisterType((*QueryAllVoteRequest)(nil), "uprminso410120202021s2.Themis.Themis.QueryAllVoteRequest")
	proto.RegisterType((*QueryVoteWithGroup)(nil), "uprminso410120202021s2.Themis.Themis.QueryVoteWithGroup")
	proto.RegisterType((*QueryVoteWithGroupAndPoll)(nil), "uprminso410120202021s2.Themis.Themis.QueryVoteWithGroupAndPoll")
	proto.RegisterType((*QueryVoteWithUser)(nil), "uprminso410120202021s2.Themis.Themis.QueryVoteWithUser")
	proto.RegisterType((*QueryVoteWithUserAndPoll)(nil), "uprminso410120202021s2.Themis.Themis.QueryVoteWithUserAndPoll")
	proto.RegisterType((*QueryVoteWithPoll)(nil), "uprminso410120202021s2.Themis.Themis.QueryVoteWithPoll")
	proto.RegisterType((*QueryVoteWithPollAndVote)(nil), "uprminso410120202021s2.Themis.Themis.QueryVoteWithPollAndVote")
	proto.RegisterType((*QueryAllVoteResponse)(nil), "uprminso410120202021s2.Themis.Themis.QueryAllVoteResponse")
	proto.RegisterType((*QueryGetPollRequest)(nil), "uprminso410120202021s2.Themis.Themis.QueryGetPollRequest")
	proto.RegisterType((*QueryGetPollResponse)(nil), "uprminso410120202021s2.Themis.Themis.QueryGetPollResponse")
	proto.RegisterType((*QueryAllPollRequest)(nil), "uprminso410120202021s2.Themis.Themis.QueryAllPollRequest")
	proto.RegisterType((*QueryAllPollsWithNameRequest)(nil), "uprminso410120202021s2.Themis.Themis.QueryAllPollsWithNameRequest")
	proto.RegisterType((*QueryAllPollsInGroupRequest)(nil), "uprminso410120202021s2.Themis.Themis.QueryAllPollsInGroupRequest")
	proto.RegisterType((*QueryAllPollsInGroupWithNameRequest)(nil), "uprminso410120202021s2.Themis.Themis.QueryAllPollsInGroupWithNameRequest")
	proto.RegisterType((*QueryAllPollResponse)(nil), "uprminso410120202021s2.Themis.Themis.QueryAllPollResponse")
	proto.RegisterType((*QueryGetGroupRequest)(nil), "uprminso410120202021s2.Themis.Themis.QueryGetGroupRequest")
	proto.RegisterType((*QueryGetGroupAddressRequest)(nil), "uprminso410120202021s2.Themis.Themis.QueryGetGroupAddressRequest")
	proto.RegisterType((*QueryGetGroupResponse)(nil), "uprminso410120202021s2.Themis.Themis.QueryGetGroupResponse")
	proto.RegisterType((*QueryAllGroupRequest)(nil), "uprminso410120202021s2.Themis.Themis.QueryAllGroupRequest")
	proto.RegisterType((*QueryAllGroupWithNamesRequest)(nil), "uprminso410120202021s2.Themis.Themis.QueryAllGroupWithNamesRequest")
	proto.RegisterType((*QueryAllGroupResponse)(nil), "uprminso410120202021s2.Themis.Themis.QueryAllGroupResponse")
	proto.RegisterType((*QueryGetAccountRequest)(nil), "uprminso410120202021s2.Themis.Themis.QueryGetAccountRequest")
	proto.RegisterType((*QueryGetAccountAddressRequest)(nil), "uprminso410120202021s2.Themis.Themis.QueryGetAccountAddressRequest")
	proto.RegisterType((*QueryGetAccountResponse)(nil), "uprminso410120202021s2.Themis.Themis.QueryGetAccountResponse")
	proto.RegisterType((*QueryAllAccountRequest)(nil), "uprminso410120202021s2.Themis.Themis.QueryAllAccountRequest")
	proto.RegisterType((*QueryAllAccountWithNamesRequest)(nil), "uprminso410120202021s2.Themis.Themis.QueryAllAccountWithNamesRequest")
	proto.RegisterType((*QueryAllAccountResponse)(nil), "uprminso410120202021s2.Themis.Themis.QueryAllAccountResponse")
}

func init() { proto.RegisterFile("Themis/query.proto", fileDescriptor_3bf07e86a62cfcf1) }

var fileDescriptor_3bf07e86a62cfcf1 = []byte{
	// 1316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x99, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xc0, 0x33, 0x89, 0xf3, 0xed, 0xb7, 0xd3, 0x34, 0xa2, 0xaf, 0x01, 0x4a, 0x28, 0x06, 0x2d,
	0x50, 0xaa, 0xa2, 0x78, 0x63, 0x37, 0x90, 0x36, 0x4d, 0x1c, 0x36, 0x49, 0x63, 0x05, 0x10, 0x4a,
	0x2d, 0x08, 0x52, 0x25, 0x10, 0xeb, 0x78, 0xe5, 0xac, 0xb4, 0xde, 0x75, 0xbd, 0xeb, 0x8a, 0x60,
	0xf9, 0xc2, 0x11, 0x09, 0x09, 0x89, 0x03, 0x47, 0x0e, 0x1c, 0x39, 0x72, 0x42, 0x08, 0x71, 0x42,
	0xf4, 0xc0, 0xa1, 0x12, 0x48, 0xf4, 0x82, 0x28, 0x09, 0x7f, 0x00, 0x7f, 0x02, 0x9a, 0xb7, 0xb3,
	0xf6, 0xee, 0x7a, 0xad, 0x7a, 0x66, 0x97, 0xa0, 0x48, 0xce, 0x7a, 0x34, 0xf3, 0xde, 0xfb, 0xbc,
	0x1f, 0x33, 0xfb, 0xc6, 0x14, 0xde, 0x3e, 0x30, 0x9a, 0xa6, 0xab, 0xde, 0xe9, 0x18, 0xed, 0xc3,
	0x42, 0xab, 0xed, 0x78, 0x0e, 0xbc, 0xd0, 0x69, 0xb5, 0x9b, 0xa6, 0xed, 0x3a, 0x4b, 0xc5, 0xc5,
	0x62, 0x69, 0x11, 0xff, 0x8a, 0x6e, 0xa9, 0xe0, 0x4f, 0xe5, 0xff, 0xe6, 0x2f, 0x36, 0x1c, 0xa7,
	0x61, 0x19, 0xaa, 0xde, 0x32, 0x55, 0xdd, 0xb6, 0x1d, 0x4f, 0xf7, 0x4c, 0xc7, 0x76, 0x7d, 0x19,
	0xf3, 0x57, 0xf6, 0x1d, 0xb7, 0xe9, 0xb8, 0x6a, 0x4d, 0x77, 0x0d, 0x5f, 0xb8, 0x7a, 0xb7, 0x58,
	0x33, 0x3c, 0xbd, 0xa8, 0xb6, 0xf4, 0x86, 0x69, 0xe3, 0x64, 0x3e, 0xf7, 0x1c, 0xb7, 0xe1, 0xae,
	0xe3, 0x19, 0xb1, 0xa1, 0x96, 0x63, 0x59, 0x7c, 0x28, 0xb0, 0xb4, 0xd1, 0x76, 0x3a, 0x2d, 0x3e,
	0x36, 0xc7, 0xc7, 0xf4, 0xfd, 0x7d, 0xa7, 0x63, 0x7b, 0xfe, 0xa8, 0xf2, 0x22, 0x3d, 0x7f, 0x8b,
	0x69, 0xac, 0x18, 0xde, 0x9e, 0xe3, 0x19, 0x55, 0xe3, 0x4e, 0xc7, 0x70, 0x3d, 0x98, 0xa5, 0x93,
	0x66, 0xfd, 0x02, 0x79, 0x8e, 0x5c, 0xce, 0x55, 0x27, 0xcd, 0xba, 0xb2, 0x47, 0xe7, 0xa2, 0xd3,
	0xdc, 0x96, 0x63, 0xbb, 0x06, 0x94, 0x69, 0x8e, 0x7d, 0xc7, 0x99, 0x67, 0x4a, 0x57, 0x0a, 0xe3,
	0x78, 0xa3, 0x80, 0x12, 0x70, 0x9d, 0xf2, 0x1e, 0x57, 0xaf, 0x59, 0x56, 0x58, 0xfd, 0x36, 0xa5,
	0x03, 0x72, 0x2e, 0xfc, 0x52, 0xc1, 0x77, 0x53, 0x81, 0xb9, 0xa9, 0xe0, 0xc7, 0x80, 0xbb, 0xa9,
	0xb0, 0xab, 0x37, 0x82, 0xb5, 0xd5, 0xd0, 0x4a, 0xa5, 0x4d, 0x01, 0xc5, 0x33, 0xd9, 0xef, 0x9a,
	0xde, 0x41, 0x85, 0xf9, 0x03, 0xe6, 0xe8, 0x34, 0x3a, 0x86, 0xf3, 0xf9, 0x5f, 0x62, 0x3a, 0x27,
	0xa5, 0x75, 0x7e, 0x4a, 0xe8, 0x53, 0xc3, 0x4a, 0x35, 0xbb, 0xbe, 0xeb, 0x58, 0xd6, 0x08, 0xdd,
	0x40, 0x73, 0x2c, 0x7a, 0xa8, 0x35, 0x57, 0xc5, 0xe7, 0x98, 0x3d, 0x53, 0xd2, 0xf6, 0x38, 0xf4,
	0x5c, 0xc4, 0x9c, 0x77, 0x5c, 0xa3, 0xcd, 0x14, 0x76, 0x5c, 0xa3, 0x8d, 0x56, 0x9c, 0xae, 0xe2,
	0x73, 0x66, 0x0e, 0xf8, 0x84, 0xd0, 0x0b, 0x43, 0x1a, 0x03, 0xfe, 0x24, 0xc5, 0x27, 0x49, 0x1f,
	0x18, 0x81, 0x0a, 0xc9, 0x48, 0x85, 0x19, 0xd2, 0x33, 0x8d, 0x9a, 0x5d, 0x67, 0x5f, 0x13, 0x15,
	0x03, 0xcd, 0xb1, 0x62, 0x46, 0x95, 0xa7, 0xab, 0xf8, 0x9c, 0x19, 0xfd, 0x97, 0x84, 0xd7, 0x6d,
	0xbf, 0xbe, 0x86, 0xea, 0x76, 0x4a, 0xa6, 0x6e, 0xa1, 0x92, 0xe0, 0xad, 0x97, 0x1e, 0x69, 0xa0,
	0xaf, 0x3c, 0x62, 0x61, 0x68, 0xff, 0x61, 0x8e, 0x1a, 0x63, 0xff, 0xf1, 0xa7, 0x0d, 0x38, 0x76,
	0x03, 0x87, 0x8e, 0xcd, 0x81, 0x12, 0x70, 0x5d, 0x78, 0xff, 0x09, 0xab, 0xcf, 0x6a, 0xff, 0xf9,
	0x88, 0x5e, 0x0c, 0x8b, 0x77, 0x59, 0x3e, 0xbc, 0xa5, 0x37, 0xfb, 0xfb, 0x1c, 0xd0, 0x9c, 0xad,
	0x37, 0x8d, 0xa0, 0x1a, 0xd8, 0x73, 0x66, 0x89, 0xd8, 0xa5, 0x4f, 0x47, 0x74, 0xef, 0xd8, 0xb8,
	0x11, 0x05, 0xaa, 0xff, 0xdd, 0x4d, 0xf0, 0x0b, 0x42, 0x9f, 0x4f, 0xd2, 0x1e, 0x77, 0xc0, 0xc8,
	0xed, 0x10, 0xdd, 0x32, 0x39, 0xd2, 0x2d, 0xd9, 0x94, 0xc4, 0x88, 0x54, 0x9a, 0x92, 0x49, 0xa5,
	0xec, 0x4a, 0xe2, 0xd2, 0x20, 0xd7, 0x23, 0x11, 0x8b, 0xd7, 0xc4, 0x21, 0x0f, 0x70, 0x30, 0x4f,
	0xab, 0xd7, 0xdb, 0x86, 0xeb, 0x86, 0x72, 0x4b, 0xaf, 0xd7, 0xfb, 0x3b, 0x2d, 0x7b, 0xce, 0x2c,
	0xbc, 0xb7, 0xe9, 0xe3, 0x31, 0x13, 0xb9, 0x13, 0x35, 0x3a, 0x5d, 0xe9, 0xc7, 0xf3, 0x4c, 0xe9,
	0xe5, 0xf1, 0xbc, 0xe8, 0xcb, 0xf0, 0x57, 0x2a, 0xef, 0x0f, 0xe2, 0x13, 0xc1, 0xcf, 0xaa, 0x26,
	0xbb, 0xf4, 0x99, 0x88, 0xfc, 0x20, 0x25, 0xdd, 0x93, 0x28, 0xca, 0xaf, 0x08, 0xf7, 0xdc, 0x80,
	0x6e, 0xd8, 0x73, 0x53, 0x72, 0x9e, 0xcb, 0x2e, 0x03, 0x2f, 0xd3, 0x27, 0x82, 0xf0, 0x6a, 0xfe,
	0xdb, 0xe2, 0xa8, 0x1c, 0xbc, 0xca, 0x9d, 0x39, 0x98, 0xf9, 0xe8, 0x2c, 0x54, 0x6a, 0xf4, 0xc9,
	0x21, 0xf1, 0xdc, 0x0b, 0x15, 0x7a, 0x8a, 0x0f, 0xf1, 0x08, 0x2f, 0x8c, 0xe7, 0x87, 0x40, 0x4e,
	0xb0, 0x5a, 0xf9, 0x80, 0x23, 0x68, 0x96, 0x15, 0x43, 0xc8, 0x2a, 0x8f, 0x7a, 0xf4, 0xd9, 0x98,
	0x86, 0x13, 0xcd, 0xa4, 0xaf, 0x09, 0xf7, 0x62, 0x98, 0x30, 0xc9, 0x8b, 0x53, 0xf2, 0x5e, 0xcc,
	0x2c, 0xa3, 0x4a, 0xdf, 0x28, 0x74, 0x1a, 0xad, 0x85, 0xef, 0x88, 0xff, 0xea, 0x01, 0xd7, 0xc7,
	0xb3, 0x29, 0xa1, 0x3b, 0x99, 0x5f, 0x91, 0x59, 0xea, 0x5b, 0xa5, 0xac, 0x7e, 0xfc, 0xcb, 0x5f,
	0x9f, 0x4f, 0xbe, 0x0a, 0x4b, 0x2a, 0x93, 0xb1, 0xc0, 0x84, 0x2c, 0x30, 0x29, 0x0b, 0x4c, 0x08,
	0xfb, 0x28, 0x2e, 0xb8, 0x25, 0x95, 0xf7, 0x4a, 0xa1, 0x66, 0x4b, 0xed, 0x9a, 0xf5, 0x1e, 0x7c,
	0x4b, 0xe8, 0x29, 0x26, 0x4e, 0xb3, 0x2c, 0x21, 0x80, 0x68, 0x7f, 0x23, 0x04, 0x10, 0x7b, 0x75,
	0x53, 0x96, 0x11, 0xa0, 0x08, 0xaa, 0x20, 0x00, 0xfc, 0x4c, 0xe8, 0xd9, 0x68, 0x23, 0x74, 0x4d,
	0xc0, 0x8c, 0xc8, 0xca, 0x54, 0x00, 0x37, 0x11, 0x60, 0x1d, 0xd6, 0x44, 0x23, 0x80, 0x2f, 0x07,
	0x6a, 0x17, 0xff, 0xf5, 0xe0, 0x4f, 0x42, 0xe7, 0x12, 0x5b, 0xac, 0x75, 0x59, 0x2a, 0x2e, 0x20,
	0x15, 0xdc, 0x9b, 0x08, 0xb7, 0x0d, 0x5b, 0xa9, 0xe0, 0xd4, 0x2e, 0x6b, 0x0d, 0x7a, 0x70, 0x8f,
	0xd0, 0x99, 0x48, 0xdf, 0xb6, 0x2c, 0xc1, 0xc6, 0x16, 0xa6, 0x62, 0xda, 0x44, 0xa6, 0x35, 0xb8,
	0x21, 0xca, 0xc4, 0xba, 0x3b, 0xb5, 0xcb, 0x3e, 0x7b, 0xf0, 0x3b, 0xa1, 0xe7, 0x93, 0x1a, 0xc2,
	0xb2, 0x24, 0x51, 0x16, 0xc1, 0x7a, 0x1d, 0xc1, 0xb6, 0x60, 0x23, 0x05, 0x58, 0x52, 0xa8, 0x10,
	0x4c, 0x26, 0x54, 0xa9, 0x89, 0xa4, 0x43, 0xc5, 0x20, 0x02, 0x94, 0x70, 0xa8, 0xc2, 0xdd, 0x6b,
	0x59, 0x92, 0x88, 0xaf, 0xff, 0x6f, 0x42, 0x15, 0x02, 0x53, 0xbb, 0x6c, 0xa4, 0x87, 0x47, 0x10,
	0x86, 0x48, 0xf0, 0x08, 0x0a, 0x75, 0x88, 0xa2, 0x47, 0x50, 0xb8, 0xd3, 0x90, 0x3a, 0x82, 0x7c,
	0x8c, 0xe0, 0x08, 0x42, 0xaf, 0x8a, 0x1f, 0x41, 0xb2, 0x00, 0xb1, 0x56, 0x49, 0xea, 0x08, 0xc2,
	0xbb, 0x8e, 0x5f, 0x09, 0x3d, 0x1b, 0x69, 0x84, 0x61, 0x43, 0xdc, 0x8c, 0x78, 0x17, 0x9d, 0x0a,
	0x45, 0xa6, 0x60, 0x30, 0x16, 0xec, 0x65, 0x4e, 0xed, 0xb2, 0xcf, 0x1e, 0xc3, 0x9a, 0x09, 0x77,
	0xb9, 0xa0, 0x49, 0x50, 0x45, 0xfb, 0xf3, 0x54, 0x50, 0x32, 0x27, 0x2c, 0x42, 0x45, 0x4f, 0xd8,
	0xbf, 0x09, 0x9d, 0x4b, 0x6a, 0xde, 0x61, 0x47, 0x1e, 0x2f, 0xcb, 0xd8, 0xdd, 0x42, 0xcc, 0x37,
	0x60, 0x27, 0x15, 0x66, 0x24, 0x92, 0x3f, 0x10, 0xde, 0x86, 0x81, 0x60, 0x81, 0x47, 0x62, 0x77,
	0x43, 0x6a, 0x2d, 0xa7, 0x5a, 0x43, 0xaa, 0x65, 0x78, 0x45, 0x80, 0x8a, 0x03, 0xb1, 0xed, 0xe1,
	0x37, 0x42, 0x67, 0xc2, 0xd7, 0x01, 0x42, 0xb9, 0x98, 0x7c, 0x95, 0x20, 0xc4, 0x13, 0x6f, 0x6c,
	0x95, 0x0a, 0xf2, 0x68, 0xb0, 0x2e, 0xcc, 0xa3, 0xfb, 0x56, 0xa8, 0x5d, 0xf6, 0xd0, 0x83, 0xef,
	0x09, 0xfd, 0xbf, 0x6f, 0x9d, 0x65, 0xc1, 0x8a, 0x94, 0x49, 0x19, 0xe0, 0x5c, 0x43, 0x9c, 0x12,
	0x2c, 0x8a, 0xe2, 0xc0, 0x03, 0x42, 0x67, 0xa3, 0x37, 0x0e, 0xb0, 0x29, 0x61, 0x49, 0xbc, 0xcb,
	0x4c, 0x87, 0xb3, 0x85, 0x38, 0x65, 0x58, 0x15, 0x8e, 0x4e, 0xb8, 0x6c, 0x7e, 0x22, 0xfd, 0x8e,
	0x13, 0x56, 0xc5, 0xf2, 0x2d, 0xda, 0x9d, 0xcf, 0xaf, 0x49, 0xae, 0xe6, 0x38, 0xeb, 0x88, 0x73,
	0x1d, 0x96, 0x05, 0x70, 0xf8, 0x0f, 0x62, 0x7e, 0xf9, 0xfc, 0x41, 0xe8, 0x6c, 0xf4, 0x26, 0x43,
	0x28, 0x48, 0xa3, 0xee, 0x41, 0xd2, 0x72, 0xed, 0x20, 0xd7, 0x26, 0x68, 0x12, 0x5c, 0xb1, 0x32,
	0xfa, 0x91, 0x50, 0x1a, 0xd8, 0x68, 0x59, 0x42, 0xe1, 0x1a, 0xba, 0x4c, 0x11, 0xc2, 0x1a, 0xbe,
	0xa8, 0x50, 0x56, 0x10, 0x6b, 0x09, 0x4a, 0xe2, 0x58, 0xf0, 0x90, 0xd0, 0xc7, 0xe2, 0x17, 0x2f,
	0x70, 0x53, 0xca, 0x9e, 0xa1, 0x92, 0x4a, 0x89, 0xb5, 0x8d, 0x58, 0xaf, 0x41, 0x59, 0x22, 0x5a,
	0xa1, 0xb2, 0xda, 0xd8, 0xbb, 0x77, 0x94, 0x27, 0xf7, 0x8f, 0xf2, 0xe4, 0xe1, 0x51, 0x9e, 0x7c,
	0x76, 0x9c, 0x9f, 0xb8, 0x7f, 0x9c, 0x9f, 0x78, 0x70, 0x9c, 0x9f, 0xb8, 0xbd, 0xda, 0x30, 0xbd,
	0x83, 0x4e, 0xad, 0xb0, 0xef, 0x34, 0xc7, 0xd1, 0xf1, 0x61, 0xf0, 0xe0, 0x1d, 0xb6, 0x0c, 0xb7,
	0xf6, 0x3f, 0xfc, 0xed, 0xf7, 0xea, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x56, 0x98, 0xbc,
	0xd1, 0x1e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// this line is used by starport scaffolding # 2
	Vote(ctx context.Context, in *QueryGetVoteRequest, opts ...grpc.CallOption) (*QueryGetVoteResponse, error)
	VoteAll(ctx context.Context, in *QueryAllVoteRequest, opts ...grpc.CallOption) (*QueryAllVoteResponse, error)
	VoteWithGroup(ctx context.Context, in *QueryVoteWithGroup, opts ...grpc.CallOption) (*QueryAllVoteResponse, error)
	VoteWithGroupAndPoll(ctx context.Context, in *QueryVoteWithGroupAndPoll, opts ...grpc.CallOption) (*QueryAllVoteResponse, error)
	VoteWithUser(ctx context.Context, in *QueryVoteWithUser, opts ...grpc.CallOption) (*QueryAllVoteResponse, error)
	VoteWithUserAndPoll(ctx context.Context, in *QueryVoteWithUserAndPoll, opts ...grpc.CallOption) (*QueryAllVoteResponse, error)
	VoteWithPoll(ctx context.Context, in *QueryVoteWithPoll, opts ...grpc.CallOption) (*QueryAllVoteResponse, error)
	VoteWithPollAndVote(ctx context.Context, in *QueryVoteWithPollAndVote, opts ...grpc.CallOption) (*QueryAllVoteResponse, error)
	Poll(ctx context.Context, in *QueryGetPollRequest, opts ...grpc.CallOption) (*QueryGetPollResponse, error)
	PollAll(ctx context.Context, in *QueryAllPollRequest, opts ...grpc.CallOption) (*QueryAllPollResponse, error)
	PollsWithName(ctx context.Context, in *QueryAllPollsWithNameRequest, opts ...grpc.CallOption) (*QueryAllPollResponse, error)
	PollsInGroup(ctx context.Context, in *QueryAllPollsInGroupRequest, opts ...grpc.CallOption) (*QueryAllPollResponse, error)
	PollsInGroupWithName(ctx context.Context, in *QueryAllPollsInGroupWithNameRequest, opts ...grpc.CallOption) (*QueryAllPollResponse, error)
	Group(ctx context.Context, in *QueryGetGroupRequest, opts ...grpc.CallOption) (*QueryGetGroupResponse, error)
	GroupAddress(ctx context.Context, in *QueryGetGroupAddressRequest, opts ...grpc.CallOption) (*QueryAllGroupResponse, error)
	GroupAll(ctx context.Context, in *QueryAllGroupRequest, opts ...grpc.CallOption) (*QueryAllGroupResponse, error)
	GroupWithNames(ctx context.Context, in *QueryAllGroupWithNamesRequest, opts ...grpc.CallOption) (*QueryAllGroupResponse, error)
	Account(ctx context.Context, in *QueryGetAccountRequest, opts ...grpc.CallOption) (*QueryGetAccountResponse, error)
	AccountAddress(ctx context.Context, in *QueryGetAccountAddressRequest, opts ...grpc.CallOption) (*QueryGetAccountResponse, error)
	AccountAll(ctx context.Context, in *QueryAllAccountRequest, opts ...grpc.CallOption) (*QueryAllAccountResponse, error)
	AccountWithNames(ctx context.Context, in *QueryAllAccountWithNamesRequest, opts ...grpc.CallOption) (*QueryAllAccountResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Vote(ctx context.Context, in *QueryGetVoteRequest, opts ...grpc.CallOption) (*QueryGetVoteResponse, error) {
	out := new(QueryGetVoteResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteAll(ctx context.Context, in *QueryAllVoteRequest, opts ...grpc.CallOption) (*QueryAllVoteResponse, error) {
	out := new(QueryAllVoteResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/VoteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteWithGroup(ctx context.Context, in *QueryVoteWithGroup, opts ...grpc.CallOption) (*QueryAllVoteResponse, error) {
	out := new(QueryAllVoteResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/VoteWithGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteWithGroupAndPoll(ctx context.Context, in *QueryVoteWithGroupAndPoll, opts ...grpc.CallOption) (*QueryAllVoteResponse, error) {
	out := new(QueryAllVoteResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/VoteWithGroupAndPoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteWithUser(ctx context.Context, in *QueryVoteWithUser, opts ...grpc.CallOption) (*QueryAllVoteResponse, error) {
	out := new(QueryAllVoteResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/VoteWithUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteWithUserAndPoll(ctx context.Context, in *QueryVoteWithUserAndPoll, opts ...grpc.CallOption) (*QueryAllVoteResponse, error) {
	out := new(QueryAllVoteResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/VoteWithUserAndPoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteWithPoll(ctx context.Context, in *QueryVoteWithPoll, opts ...grpc.CallOption) (*QueryAllVoteResponse, error) {
	out := new(QueryAllVoteResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/VoteWithPoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteWithPollAndVote(ctx context.Context, in *QueryVoteWithPollAndVote, opts ...grpc.CallOption) (*QueryAllVoteResponse, error) {
	out := new(QueryAllVoteResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/VoteWithPollAndVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Poll(ctx context.Context, in *QueryGetPollRequest, opts ...grpc.CallOption) (*QueryGetPollResponse, error) {
	out := new(QueryGetPollResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PollAll(ctx context.Context, in *QueryAllPollRequest, opts ...grpc.CallOption) (*QueryAllPollResponse, error) {
	out := new(QueryAllPollResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/PollAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PollsWithName(ctx context.Context, in *QueryAllPollsWithNameRequest, opts ...grpc.CallOption) (*QueryAllPollResponse, error) {
	out := new(QueryAllPollResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/PollsWithName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PollsInGroup(ctx context.Context, in *QueryAllPollsInGroupRequest, opts ...grpc.CallOption) (*QueryAllPollResponse, error) {
	out := new(QueryAllPollResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/PollsInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PollsInGroupWithName(ctx context.Context, in *QueryAllPollsInGroupWithNameRequest, opts ...grpc.CallOption) (*QueryAllPollResponse, error) {
	out := new(QueryAllPollResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/PollsInGroupWithName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Group(ctx context.Context, in *QueryGetGroupRequest, opts ...grpc.CallOption) (*QueryGetGroupResponse, error) {
	out := new(QueryGetGroupResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/Group", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GroupAddress(ctx context.Context, in *QueryGetGroupAddressRequest, opts ...grpc.CallOption) (*QueryAllGroupResponse, error) {
	out := new(QueryAllGroupResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/GroupAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GroupAll(ctx context.Context, in *QueryAllGroupRequest, opts ...grpc.CallOption) (*QueryAllGroupResponse, error) {
	out := new(QueryAllGroupResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/GroupAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GroupWithNames(ctx context.Context, in *QueryAllGroupWithNamesRequest, opts ...grpc.CallOption) (*QueryAllGroupResponse, error) {
	out := new(QueryAllGroupResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/GroupWithNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Account(ctx context.Context, in *QueryGetAccountRequest, opts ...grpc.CallOption) (*QueryGetAccountResponse, error) {
	out := new(QueryGetAccountResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/Account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountAddress(ctx context.Context, in *QueryGetAccountAddressRequest, opts ...grpc.CallOption) (*QueryGetAccountResponse, error) {
	out := new(QueryGetAccountResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/AccountAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountAll(ctx context.Context, in *QueryAllAccountRequest, opts ...grpc.CallOption) (*QueryAllAccountResponse, error) {
	out := new(QueryAllAccountResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/AccountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountWithNames(ctx context.Context, in *QueryAllAccountWithNamesRequest, opts ...grpc.CallOption) (*QueryAllAccountResponse, error) {
	out := new(QueryAllAccountResponse)
	err := c.cc.Invoke(ctx, "/uprminso410120202021s2.Themis.Themis.Query/AccountWithNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// this line is used by starport scaffolding # 2
	Vote(context.Context, *QueryGetVoteRequest) (*QueryGetVoteResponse, error)
	VoteAll(context.Context, *QueryAllVoteRequest) (*QueryAllVoteResponse, error)
	VoteWithGroup(context.Context, *QueryVoteWithGroup) (*QueryAllVoteResponse, error)
	VoteWithGroupAndPoll(context.Context, *QueryVoteWithGroupAndPoll) (*QueryAllVoteResponse, error)
	VoteWithUser(context.Context, *QueryVoteWithUser) (*QueryAllVoteResponse, error)
	VoteWithUserAndPoll(context.Context, *QueryVoteWithUserAndPoll) (*QueryAllVoteResponse, error)
	VoteWithPoll(context.Context, *QueryVoteWithPoll) (*QueryAllVoteResponse, error)
	VoteWithPollAndVote(context.Context, *QueryVoteWithPollAndVote) (*QueryAllVoteResponse, error)
	Poll(context.Context, *QueryGetPollRequest) (*QueryGetPollResponse, error)
	PollAll(context.Context, *QueryAllPollRequest) (*QueryAllPollResponse, error)
	PollsWithName(context.Context, *QueryAllPollsWithNameRequest) (*QueryAllPollResponse, error)
	PollsInGroup(context.Context, *QueryAllPollsInGroupRequest) (*QueryAllPollResponse, error)
	PollsInGroupWithName(context.Context, *QueryAllPollsInGroupWithNameRequest) (*QueryAllPollResponse, error)
	Group(context.Context, *QueryGetGroupRequest) (*QueryGetGroupResponse, error)
	GroupAddress(context.Context, *QueryGetGroupAddressRequest) (*QueryAllGroupResponse, error)
	GroupAll(context.Context, *QueryAllGroupRequest) (*QueryAllGroupResponse, error)
	GroupWithNames(context.Context, *QueryAllGroupWithNamesRequest) (*QueryAllGroupResponse, error)
	Account(context.Context, *QueryGetAccountRequest) (*QueryGetAccountResponse, error)
	AccountAddress(context.Context, *QueryGetAccountAddressRequest) (*QueryGetAccountResponse, error)
	AccountAll(context.Context, *QueryAllAccountRequest) (*QueryAllAccountResponse, error)
	AccountWithNames(context.Context, *QueryAllAccountWithNamesRequest) (*QueryAllAccountResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Vote(ctx context.Context, req *QueryGetVoteRequest) (*QueryGetVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedQueryServer) VoteAll(ctx context.Context, req *QueryAllVoteRequest) (*QueryAllVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteAll not implemented")
}
func (*UnimplementedQueryServer) VoteWithGroup(ctx context.Context, req *QueryVoteWithGroup) (*QueryAllVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWithGroup not implemented")
}
func (*UnimplementedQueryServer) VoteWithGroupAndPoll(ctx context.Context, req *QueryVoteWithGroupAndPoll) (*QueryAllVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWithGroupAndPoll not implemented")
}
func (*UnimplementedQueryServer) VoteWithUser(ctx context.Context, req *QueryVoteWithUser) (*QueryAllVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWithUser not implemented")
}
func (*UnimplementedQueryServer) VoteWithUserAndPoll(ctx context.Context, req *QueryVoteWithUserAndPoll) (*QueryAllVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWithUserAndPoll not implemented")
}
func (*UnimplementedQueryServer) VoteWithPoll(ctx context.Context, req *QueryVoteWithPoll) (*QueryAllVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWithPoll not implemented")
}
func (*UnimplementedQueryServer) VoteWithPollAndVote(ctx context.Context, req *QueryVoteWithPollAndVote) (*QueryAllVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWithPollAndVote not implemented")
}
func (*UnimplementedQueryServer) Poll(ctx context.Context, req *QueryGetPollRequest) (*QueryGetPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (*UnimplementedQueryServer) PollAll(ctx context.Context, req *QueryAllPollRequest) (*QueryAllPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollAll not implemented")
}
func (*UnimplementedQueryServer) PollsWithName(ctx context.Context, req *QueryAllPollsWithNameRequest) (*QueryAllPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollsWithName not implemented")
}
func (*UnimplementedQueryServer) PollsInGroup(ctx context.Context, req *QueryAllPollsInGroupRequest) (*QueryAllPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollsInGroup not implemented")
}
func (*UnimplementedQueryServer) PollsInGroupWithName(ctx context.Context, req *QueryAllPollsInGroupWithNameRequest) (*QueryAllPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollsInGroupWithName not implemented")
}
func (*UnimplementedQueryServer) Group(ctx context.Context, req *QueryGetGroupRequest) (*QueryGetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Group not implemented")
}
func (*UnimplementedQueryServer) GroupAddress(ctx context.Context, req *QueryGetGroupAddressRequest) (*QueryAllGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupAddress not implemented")
}
func (*UnimplementedQueryServer) GroupAll(ctx context.Context, req *QueryAllGroupRequest) (*QueryAllGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupAll not implemented")
}
func (*UnimplementedQueryServer) GroupWithNames(ctx context.Context, req *QueryAllGroupWithNamesRequest) (*QueryAllGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupWithNames not implemented")
}
func (*UnimplementedQueryServer) Account(ctx context.Context, req *QueryGetAccountRequest) (*QueryGetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Account not implemented")
}
func (*UnimplementedQueryServer) AccountAddress(ctx context.Context, req *QueryGetAccountAddressRequest) (*QueryGetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAddress not implemented")
}
func (*UnimplementedQueryServer) AccountAll(ctx context.Context, req *QueryAllAccountRequest) (*QueryAllAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAll not implemented")
}
func (*UnimplementedQueryServer) AccountWithNames(ctx context.Context, req *QueryAllAccountWithNamesRequest) (*QueryAllAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountWithNames not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Vote(ctx, req.(*QueryGetVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/VoteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteAll(ctx, req.(*QueryAllVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteWithGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVoteWithGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteWithGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/VoteWithGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteWithGroup(ctx, req.(*QueryVoteWithGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteWithGroupAndPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVoteWithGroupAndPoll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteWithGroupAndPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/VoteWithGroupAndPoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteWithGroupAndPoll(ctx, req.(*QueryVoteWithGroupAndPoll))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteWithUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVoteWithUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteWithUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/VoteWithUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteWithUser(ctx, req.(*QueryVoteWithUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteWithUserAndPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVoteWithUserAndPoll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteWithUserAndPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/VoteWithUserAndPoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteWithUserAndPoll(ctx, req.(*QueryVoteWithUserAndPoll))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteWithPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVoteWithPoll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteWithPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/VoteWithPoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteWithPoll(ctx, req.(*QueryVoteWithPoll))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteWithPollAndVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVoteWithPollAndVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteWithPollAndVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/VoteWithPollAndVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteWithPollAndVote(ctx, req.(*QueryVoteWithPollAndVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Poll(ctx, req.(*QueryGetPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PollAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PollAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/PollAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PollAll(ctx, req.(*QueryAllPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PollsWithName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPollsWithNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PollsWithName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/PollsWithName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PollsWithName(ctx, req.(*QueryAllPollsWithNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PollsInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPollsInGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PollsInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/PollsInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PollsInGroup(ctx, req.(*QueryAllPollsInGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PollsInGroupWithName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPollsInGroupWithNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PollsInGroupWithName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/PollsInGroupWithName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PollsInGroupWithName(ctx, req.(*QueryAllPollsInGroupWithNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Group_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Group(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/Group",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Group(ctx, req.(*QueryGetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GroupAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGroupAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GroupAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/GroupAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GroupAddress(ctx, req.(*QueryGetGroupAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GroupAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GroupAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/GroupAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GroupAll(ctx, req.(*QueryAllGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GroupWithNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGroupWithNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GroupWithNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/GroupWithNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GroupWithNames(ctx, req.(*QueryAllGroupWithNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Account_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Account(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/Account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Account(ctx, req.(*QueryGetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/AccountAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountAddress(ctx, req.(*QueryGetAccountAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/AccountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountAll(ctx, req.(*QueryAllAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountWithNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAccountWithNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountWithNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uprminso410120202021s2.Themis.Themis.Query/AccountWithNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountWithNames(ctx, req.(*QueryAllAccountWithNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uprminso410120202021s2.Themis.Themis.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vote",
			Handler:    _Query_Vote_Handler,
		},
		{
			MethodName: "VoteAll",
			Handler:    _Query_VoteAll_Handler,
		},
		{
			MethodName: "VoteWithGroup",
			Handler:    _Query_VoteWithGroup_Handler,
		},
		{
			MethodName: "VoteWithGroupAndPoll",
			Handler:    _Query_VoteWithGroupAndPoll_Handler,
		},
		{
			MethodName: "VoteWithUser",
			Handler:    _Query_VoteWithUser_Handler,
		},
		{
			MethodName: "VoteWithUserAndPoll",
			Handler:    _Query_VoteWithUserAndPoll_Handler,
		},
		{
			MethodName: "VoteWithPoll",
			Handler:    _Query_VoteWithPoll_Handler,
		},
		{
			MethodName: "VoteWithPollAndVote",
			Handler:    _Query_VoteWithPollAndVote_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _Query_Poll_Handler,
		},
		{
			MethodName: "PollAll",
			Handler:    _Query_PollAll_Handler,
		},
		{
			MethodName: "PollsWithName",
			Handler:    _Query_PollsWithName_Handler,
		},
		{
			MethodName: "PollsInGroup",
			Handler:    _Query_PollsInGroup_Handler,
		},
		{
			MethodName: "PollsInGroupWithName",
			Handler:    _Query_PollsInGroupWithName_Handler,
		},
		{
			MethodName: "Group",
			Handler:    _Query_Group_Handler,
		},
		{
			MethodName: "GroupAddress",
			Handler:    _Query_GroupAddress_Handler,
		},
		{
			MethodName: "GroupAll",
			Handler:    _Query_GroupAll_Handler,
		},
		{
			MethodName: "GroupWithNames",
			Handler:    _Query_GroupWithNames_Handler,
		},
		{
			MethodName: "Account",
			Handler:    _Query_Account_Handler,
		},
		{
			MethodName: "AccountAddress",
			Handler:    _Query_AccountAddress_Handler,
		},
		{
			MethodName: "AccountAll",
			Handler:    _Query_AccountAll_Handler,
		},
		{
			MethodName: "AccountWithNames",
			Handler:    _Query_AccountWithNames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Themis/query.proto",
}

func (m *QueryGetVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVoteWithGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoteWithGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoteWithGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Group != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Group))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVoteWithGroupAndPoll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoteWithGroupAndPoll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoteWithGroupAndPoll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Poll != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Poll))
		i--
		dAtA[i] = 0x10
	}
	if m.Group != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Group))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVoteWithUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoteWithUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoteWithUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVoteWithUserAndPoll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoteWithUserAndPoll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoteWithUserAndPoll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Poll != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Poll))
		i--
		dAtA[i] = 0x10
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVoteWithPoll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoteWithPoll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoteWithPoll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Poll != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Poll))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVoteWithPollAndVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoteWithPollAndVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoteWithPollAndVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Vote) > 0 {
		i -= len(m.Vote)
		copy(dAtA[i:], m.Vote)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Vote)))
		i--
		dAtA[i] = 0x12
	}
	if m.Poll != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Poll))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vote) > 0 {
		for iNdEx := len(m.Vote) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vote[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPollRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPollRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPollRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPollResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPollResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPollResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Poll != nil {
		{
			size, err := m.Poll.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPollRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPollRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPollRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPollsWithNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPollsWithNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPollsWithNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPollsInGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPollsInGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPollsInGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Group != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Group))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPollsInGroupWithNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPollsInGroupWithNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPollsInGroupWithNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Group != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Group))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPollResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPollResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPollResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Poll) > 0 {
		for iNdEx := len(m.Poll) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Poll[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGroupAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGroupAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGroupAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGroupWithNamesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGroupWithNamesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGroupWithNamesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Group) > 0 {
		for iNdEx := len(m.Group) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Group[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAccountWithNamesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccountWithNamesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccountWithNamesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		for iNdEx := len(m.Account) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Account[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVoteWithGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != 0 {
		n += 1 + sovQuery(uint64(m.Group))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVoteWithGroupAndPoll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != 0 {
		n += 1 + sovQuery(uint64(m.Group))
	}
	if m.Poll != 0 {
		n += 1 + sovQuery(uint64(m.Poll))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVoteWithUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVoteWithUserAndPoll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Poll != 0 {
		n += 1 + sovQuery(uint64(m.Poll))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVoteWithPoll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Poll != 0 {
		n += 1 + sovQuery(uint64(m.Poll))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVoteWithPollAndVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Poll != 0 {
		n += 1 + sovQuery(uint64(m.Poll))
	}
	l = len(m.Vote)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vote) > 0 {
		for _, e := range m.Vote {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPollRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPollResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Poll != nil {
		l = m.Poll.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPollRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPollsWithNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPollsInGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != 0 {
		n += 1 + sovQuery(uint64(m.Group))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPollsInGroupWithNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != 0 {
		n += 1 + sovQuery(uint64(m.Group))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPollResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Poll) > 0 {
		for _, e := range m.Poll {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetGroupAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGroupWithNamesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Group) > 0 {
		for _, e := range m.Group {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetAccountAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAccountWithNamesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Account) > 0 {
		for _, e := range m.Account {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetVoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &Vote{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoteWithGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoteWithGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoteWithGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			m.Group = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Group |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoteWithGroupAndPoll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoteWithGroupAndPoll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoteWithGroupAndPoll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			m.Group = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Group |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			m.Poll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Poll |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoteWithUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoteWithUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoteWithUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoteWithUserAndPoll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoteWithUserAndPoll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoteWithUserAndPoll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			m.Poll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Poll |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoteWithPoll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoteWithPoll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoteWithPoll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			m.Poll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Poll |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoteWithPollAndVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoteWithPollAndVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoteWithPollAndVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			m.Poll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Poll |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vote = append(m.Vote, &Vote{})
			if err := m.Vote[len(m.Vote)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPollRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPollRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPollRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPollResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPollResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPollResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Poll == nil {
				m.Poll = &Poll{}
			}
			if err := m.Poll.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPollRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPollRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPollRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPollsWithNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPollsWithNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPollsWithNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPollsInGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPollsInGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPollsInGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			m.Group = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Group |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPollsInGroupWithNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPollsInGroupWithNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPollsInGroupWithNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			m.Group = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Group |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPollResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPollResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPollResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Poll = append(m.Poll, &Poll{})
			if err := m.Poll[len(m.Poll)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGroupAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGroupAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGroupAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &Group{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGroupWithNamesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGroupWithNamesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGroupWithNamesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = append(m.Group, &Group{})
			if err := m.Group[len(m.Group)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccountWithNamesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccountWithNamesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccountWithNamesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account, &Account{})
			if err := m.Account[len(m.Account)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
